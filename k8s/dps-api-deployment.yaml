apiVersion: apps/v1
kind: Deployment
metadata:
  name: dps-api
  namespace: dps-system
  labels:
    app: dps-api
    component: backend
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: dps-api
  template:
    metadata:
      labels:
        app: dps-api
        component: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: dps-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
      containers:
      - name: dps-api
        image: ghcr.io/your-org/dps:latest-api
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: dps-secrets
              key: redis-url
        - name: MONGODB_URL
          valueFrom:
            secretKeyRef:
              name: dps-secrets
              key: mongodb-url
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: dps-secrets
              key: jwt-secret
        - name: OLLAMA_API_URL
          value: "http://ollama-service:11434"
        - name: LOG_LEVEL
          value: "INFO"
        - name: WORKER_PROCESSES
          value: "1"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: model-cache
          mountPath: /app/models_cache
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: dps-model-cache
      - name: logs
        persistentVolumeClaim:
          claimName: dps-logs
      - name: config
        configMap:
          name: dps-config
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "dps"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - dps-api
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: dps-api-service
  namespace: dps-system
  labels:
    app: dps-api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: dps-api
---
apiVersion: v1
kind: Service
metadata:
  name: dps-api-headless
  namespace: dps-system
  labels:
    app: dps-api
spec:
  clusterIP: None
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: dps-api
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: dps-api-hpa
  namespace: dps-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: dps-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60